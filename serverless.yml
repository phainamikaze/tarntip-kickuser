# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: tarntip-kickuser # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 128
  apiname: tarntip-kickuser
  stage: prod
  region: ap-southeast-1

# you can add statements to the Lambda function's IAM Role here
# iamRoleStatements:
#   - Effect: "Allow"
#     Action:
#       - "ec2:DescribeSecurityGroups"
#       - "ec2:DescribeSubnets"
#       - "ec2:DescribeVpcs"
#     Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  include:
    - functions/**
  exclude:
    - build/**
    - node_modules/**

functions:
  onlineList:
    handler: functions/onlineList/index.handler
    events:
      - http:
          path: online
          method: get
          cors: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: arn:aws:cognito-idp:ap-southeast-1:435044949037:userpool/ap-southeast-1_7wI7enAk7
            claims:
              - "cognito:username"  

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    # web hosting 
    StaticWebHosting:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
      DeletionPolicy: Retain
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyStaticWebHostingPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref StaticWebHosting
                  - /*
        Bucket: !Ref StaticWebHosting
    # Amazon Cognito user pool
    UserPool:
      Type: "AWS::Cognito::UserPool"
      Description: "An Amazon Cognito user pool for authenticating users"
      Properties:
        UserPoolName: ${self:provider.apiname}-user-pool
    # An app client for the Amazon Cognito user pool
    WebUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Description: "App Client for Web Usage"
      Properties:
        ClientName: ${self:provider.apiname}-web-cognitoclient
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
  Outputs:
    WebsiteURL:
      Value: !GetAtt 
        - StaticWebHosting
        - WebsiteURL
      Description: URL for website hosted on S3
